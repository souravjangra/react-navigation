{"version":3,"sources":["MaterialTopTabView.tsx"],"names":["CommonActions","useTheme","React","View","TabView","MaterialTopTabBar","MaterialTopTabView","tabBar","props","state","navigation","descriptors","sceneContainerStyle","rest","colors","renderTabBar","focusedOptions","routes","index","key","options","tabBarStyle","flex","backgroundColor","background","dispatch","navigate","name","merge","target","route","render","lazyPlaceholder","lazy","lazyPreloadDistance","swipeEnabled","emit","type"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  ParamListBase,\n  Route,\n  TabNavigationState,\n  useTheme\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\nimport { SceneRendererProps, TabView } from 'react-native-tab-view';\nimport type {\n  MaterialTopTabBarProps,\n  MaterialTopTabDescriptorMap,\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationHelpers\n} from '../types';\nimport MaterialTopTabBar from './MaterialTopTabBar';\n\n\ntype Props = MaterialTopTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: MaterialTopTabNavigationHelpers;\n  descriptors: MaterialTopTabDescriptorMap;\n};\n\nexport default function MaterialTopTabView({\n  tabBar = (props: MaterialTopTabBarProps) => <MaterialTopTabBar {...props} />,\n  state,\n  navigation,\n  descriptors,\n  sceneContainerStyle,\n  ...rest\n}: Props) {\n  const { colors } = useTheme();\n\n  const renderTabBar = (props: SceneRendererProps) => {\n    return tabBar({\n      ...props,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n    });\n  };\n\n  const focusedOptions = descriptors[state.routes[state.index].key].options;\n  const tabBarStyle = focusedOptions.tabBarStyle as ViewStyle;\n\n  return (\n    <View style={{\n      flex:1,\n      backgroundColor: tabBarStyle.backgroundColor ?? colors.background\n    }}>\n      <TabView<Route<string>>\n      {...rest}\n      onIndexChange={(index) =>\n        navigation.dispatch({\n          ...CommonActions.navigate({\n            name: state.routes[index].name,\n            merge: true,\n          }),\n          target: state.key,\n        })\n      }\n      renderScene={({ route }) => descriptors[route.key].render()}\n      navigationState={state}\n      renderTabBar={renderTabBar}\n      renderLazyPlaceholder={({ route }) =>\n        descriptors[route.key].options.lazyPlaceholder?.() ?? null\n      }\n      lazy={({ route }) => descriptors[route.key].options.lazy === true}\n      lazyPreloadDistance={focusedOptions.lazyPreloadDistance}\n      swipeEnabled={focusedOptions.swipeEnabled}\n      onSwipeStart={() => navigation.emit({ type: 'swipeStart' })}\n      onSwipeEnd={() => navigation.emit({ type: 'swipeEnd' })}\n      sceneContainerStyle={[\n        { backgroundColor: colors.background },\n        sceneContainerStyle,\n      ]}\n    />\n    </View>\n  );\n}\n"]}